<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="7" hostname="DESKTOP-FQDDU7F" name="pytest" skipped="0" tests="13" time="0.609" timestamp="2019-11-06T12:53:12.444158"><testcase classname="test_compare" file="test_compare.py" line="11" name="test_less" time="0.002"></testcase><testcase classname="test_compare" file="test_compare.py" line="1" name="test_greater" time="0.000"><failure message="assert 100 &gt; 100">@pytest.mark.great
    def test_greater():
       num = 100
&gt;      assert num &gt; 100
E      assert 100 &gt; 100

test_compare.py:5: AssertionError</failure></testcase><testcase classname="test_compare" file="test_compare.py" line="6" name="test_greater_equal" time="0.000"></testcase><testcase classname="test_div_by_3_6" file="test_div_by_3_6.py" line="5" name="test_divisible_by_6" time="0.001"><failure message="assert 3 == 0
  -3
  +0">input_value = 39

    def test_divisible_by_6(input_value):
&gt;      assert input_value % 6 == 0
E      assert 3 == 0
E        -3
E        +0

test_div_by_3_6.py:7: AssertionError</failure></testcase><testcase classname="test_div_by_3_6" file="test_div_by_3_6.py" line="2" name="test_divisible_by_3" time="0.000"></testcase><testcase classname="test_multiplication" file="test_multiplication.py" line="2" name="test_multiplication_11[2-2]" time="0.001"><failure message="assert 22 == 2
  -22
  +2">num = 2, output = 2

    @pytest.mark.parametrize(&quot;num, output&quot;,[(1,1),(2,2),(3,35),(4,44)])
    def test_multiplication_11(num, output):
&gt;      assert 11*num == output
E      assert 22 == 2
E        -22
E        +2

test_multiplication.py:5: AssertionError</failure></testcase><testcase classname="test_div_by_13" file="test_div_by_13.py" line="2" name="test_divisible_by_13" time="0.001"></testcase><testcase classname="test_multiplication" file="test_multiplication.py" line="2" name="test_multiplication_11[1-1]" time="0.001"><failure message="assert 11 == 1
  -11
  +1">num = 1, output = 1

    @pytest.mark.parametrize(&quot;num, output&quot;,[(1,1),(2,2),(3,35),(4,44)])
    def test_multiplication_11(num, output):
&gt;      assert 11*num == output
E      assert 11 == 1
E        -11
E        +1

test_multiplication.py:5: AssertionError</failure></testcase><testcase classname="test_multiplication" file="test_multiplication.py" line="2" name="test_multiplication_11[4-44]" time="0.001"></testcase><testcase classname="test_multiplication" file="test_multiplication.py" line="2" name="test_multiplication_11[3-35]" time="0.002"><failure message="assert 33 == 35
  -33
  +35">num = 3, output = 35

    @pytest.mark.parametrize(&quot;num, output&quot;,[(1,1),(2,2),(3,35),(4,44)])
    def test_multiplication_11(num, output):
&gt;      assert 11*num == output
E      assert 33 == 35
E        -33
E        +35

test_multiplication.py:5: AssertionError</failure></testcase><testcase classname="test_square" file="test_square.py" line="8" name="testsquare" time="0.001"><failure message="assert 49 == 40
  -49
  +40">@pytest.mark.square
    def testsquare():
       num = 7
&gt;      assert 7*7 == 40
E      assert 49 == 40
E        -49
E        +40

test_square.py:12: AssertionError</failure></testcase><testcase classname="test_square" file="test_square.py" line="3" name="test_sqrt" time="0.001"></testcase><testcase classname="test_square" file="test_square.py" line="13" name="test_equality" time="0.001"><failure message="assert 10 == 11
  -10
  +11">@pytest.mark.others
    def test_equality():
&gt;      assert 10 == 11
E      assert 10 == 11
E        -10
E        +11

test_square.py:16: AssertionError</failure></testcase></testsuite></testsuites>